---
version: v1  # service version, good practice to label every k8s resource with a version if we want to use istio traffic routing capabilities in the future

nameOverride: "service"  # replace this by your service name
fullnameOverride: ""  # fill if you whish to override the generatedChartFullName
name: &nameOverride

# Controls if prometheus scrapping should be enabled for this service
prometheus:
  enabled: true  # enables/disable scraping of prometheus metrics
  path: '/metrics'  # path for scrapping prometheus metrics
  port: 8082  # port were the metrics web server is running
  scheme: 'http'  # http connection scheme

# Service serviceAccount
serviceAccount:
  create: true  # if true the chart will create the service account
  name: java-service-sa  # name of the serviceAccount to use or to create
  annotations: {}  # service account annotations

# controls k8s Role Based Access Control settings tied to the serviceAccount
rbac:
  enabled: true  # enables/disables the creation of Role Based Policies
  type: cluster  # type can be cluster or namespace  ( ClusterRole or Role)

# pod affinity policies
affinity: {}

# node selector
nodeSelector: {}

# tolerations
tolerations: []

replicaCount: 1

# service image
image:
  registry: docker.io  # container registry url
  repository: pedrorochaorg/hello-minikube  # container registry repo name
  tag: 1.0.0  # image tag
  pullPolicy: IfNotPresent  # kubernetes container image pull policy

#  command to execute inside pod
# command:
#   name: some.command
#   args:
#     - args1

# limits the container resources
resources:
  # resources that the container requires to boot
  requests:
    memory: 20Mi
    cpu: 10m
  # limit of resources that a container may consume
  limits:
    memory: 1024Mi
    cpu: 500m

#  Controlls the Horizontal Pod Autoscalling settings
hpa:
  minReplicas: 1  # set's the minimum number of replicas for this service
  maxReplicas: 2  # set's the maximum number of replicas for this service
  targetCPU: 80  # the target cpu value that triggers the scale action

# Constrols the liveness and readiness kubernetes pod probes
probes:
  livenessProbe:
    initialDelaySeconds: 60
    failureThreshold: 2
    httpGet:
      path: /
      port: 8080
      scheme: HTTP
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 20
  readinessProbe:
    initialDelaySeconds: 10
    failureThreshold: 10
    httpGet:
      path: /
      port: 8080
      scheme: HTTP
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 10


podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# Allows you to set extra container environment variables
extraEnvs:
  - name: XMS
    value: 512Mi
  - name: XMX
    value: 1024Mi
#  - name: SOME_SECRET_VAR
#    valueFrom:
#      secretKeyRef:
#        name: some-secret
#        key: some-key

# Allows you to create extra volumes
extraVolumes: []
#   - name: sample-volume
#     emptyDir: {}

# Allows you to mount extra volume mounts onto your container
extraVolumeMounts: []
#   - name: sample-volume-mount
#     mountPath: /sample/volume/mount

# Allows you to expose extra container ports
extraContainerPorts: []
#   - name: grpc-port
#     containerPort: 8081

# service related settings
service:
  enabled: true  # enables helm to create a dedicated clusterIP service for this service
  http: true  # creates a service that routes traffic from port 80 to port 8080 ( this port is already exposed in the container )
# add additional port's to this service
  extraPorts: []
#    - name: grpc  # port name , must be http, https, http2, grpc or tcp ( istio )
#      port: 81
#      protocol: TCP  # service protocol TCP/UDP
#      targetPort: 8081

# specify k8s configmaps to create
configMaps: []
#  - name: some-config-map
#    data:
#      somefile.txt: |
#        some text containerPort
#      somenewfile.txt: |
#        some other text content

# specify k8s secrets to create
secrets: []
#  - name: some-secret
#    data:
#    - name: key1
#      value: value1
#    - name: key2
#      value: value2
istio:
  trafficManagement:
    external:
      http: []
      https: []
      httpAndHttps: []
      httpToHttps: []
      tcp: []
    egress:
      http: []
      https: []
      httpToHttps: []
      tcp: []
    ingress: []
    extraDestinationRules: []
    extraVirtualServices: []
    extraServiceEntries: []
    extraGateways: []
