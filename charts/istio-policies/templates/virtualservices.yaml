{{- $scope := . }}
{{- $values := .Values }}
{{- $release := .Release }}
{{- $chart := .Chart }}
{{- if $values.trafficManagement }}
  # External Rules
  {{- if $values.trafficManagement.external }}
    {{- if $values.trafficManagement.external.httpAndHttps }}
      {{- range $service := $values.trafficManagement.external.httpAndHttps }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $service.name }}-ext
  namespace: {{ $release.Namespace }}
  labels:
{{ include "chart.labels" $scope | indent 4 }}
spec:
  hosts:
  - {{ $service.host }}
  tls:
  - match:
    - port: {{ default 443 $service.port.https }}
      sniHosts:
      - {{ $service.host }}
    route:
    - destination:
        host: {{ $service.host }}
        port:
          number: {{ default 443 $service.port.https }}
      weight: 100
      {{- end }}
    {{- end }}
    {{- if $values.trafficManagement.external.httpToHttps }}
      {{- range $service := $values.trafficManagement.external.httpToHttps }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $service.name }}-ext
  namespace: {{ $release.Namespace }}
  labels:
{{ include "chart.labels" $scope | indent 4 }}
spec:
  hosts:
  - {{ $service.host }}
  tls:
  - match:
    - port: {{ default 80 $service.port.http }}
    route:
    - destination:
        host: {{ $service.host }}
        subset: {{ $service.name }}-tls-origination
        port:
          number: {{ default 443 $service.port.https }}
      {{- end }}
    {{- end }}
  {{- end }}
  # Egress Rules
  {{- if $values.trafficManagement.egress }}
    {{- if $values.trafficManagement.egress.http }}
      {{- range $service := $values.trafficManagement.egress.http }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $service.name }}-egress
  namespace: {{ $release.Namespace }}
  labels:
{{ include "chart.labels" $scope | indent 4 }}
spec:
  hosts:
  - {{ $service.host }}
  gateways:
  - {{ $release.Namespace }}/{{ $service.name }}-egress
  - mesh
  http:
  - match:
    - gateways:
      - mesh
      port: {{ default 80 $service.port }}
    route:
    - destination:
        host: {{ default "istio-egressgateway" $service.gateway.name }}.istio-system.svc.cluster.local
        subset: {{ $service.name }}-egress
        port:
          number: {{ default 80 $service.port }}
      weight: 100
  - match:
    - gateways:
      - {{ $release.Namespace }}/{{ $service.name }}-egress
      port: {{ default 80 $service.port }}
    route:
    - destination:
        host: {{ $service.host }}
        port:
          number: {{ default 80 $service.port }}
      weight: 100
      {{- end }}
    {{- end }}
    {{- if $values.trafficManagement.egress.https }}
      {{- range $service := $values.trafficManagement.egress.https }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $service.name }}-egress
  namespace: {{ $release.Namespace }}
  labels:
{{ include "chart.labels" $scope | indent 4 }}
spec:
  hosts:
  - {{ $service.host }}
  gateways:
  - mesh
  - {{ $release.Namespace }}/{{ $service.name }}-egress
  tls:
  - match:
    - gateways:
      - mesh
      port: {{ default 443 $service.port }}
      sniHosts:
      - {{ $service.host }}
    route:
    - destination:
        host: {{ default "istio-egressgateway" $service.gateway.name }}.istio-system.svc.cluster.local
        subset: {{ $service.name }}-egress
        port:
          number: {{ default 443 $service.port }}
  - match:
    - gateways:
      - {{ $release.Namespace }}/{{ $service.name }}-egress
      port: {{ default 443 $service.port }}
      sniHosts:
        - {{ $service.host }}
    route:
    - destination:
        host: {{ $service.host }}
        port:
          number: {{ default 443 $service.port }}
      weight: 100
      {{- end }}
    {{- end }}
    {{- if $values.trafficManagement.egress.httpToHttps }}
      {{- range $service := $values.trafficManagement.egress.httpToHttps }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $service.name }}-egress
  namespace: {{ $release.Namespace }}
  labels:
{{ include "chart.labels" $scope | indent 4 }}
spec:
  hosts:
  - {{ $service.host }}
  gateways:
    - {{ $release.Namespace }}/{{ $service.name }}-egress
    - mesh
  http:
  - match:
    - gateways:
      - mesh
      port: {{ default 80 $service.port.http }}
    route:
    - destination:
        host: {{ default "istio-egressgateway" $service.gateway.name }}.istio-system.svc.cluster.local
        subset: {{ $service.name }}-egress
        port:
          number: {{ default 80 $service.port.http }}
      weight: 100
  - match:
    - gateways:
      - {{ $release.Namespace }}/{{ $service.name }}-egress
      port: {{ default 80 $service.port.http }}
    route:
    - destination:
        host: {{ $service.host }}
        port:
          number: {{ default 443 $service.port.https }}
      weight: 100
      {{- end }}
    {{- end }}
    {{- if $values.trafficManagement.egress.tcp }}
      {{- range $service := $values.trafficManagement.egress.tcp }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $service.name }}-egress
  namespace: {{ $release.Namespace }}
  labels:
{{ include "chart.labels" $scope | indent 4 }}
spec:
  hosts:
  - {{ $service.host }}
  gateways:
  - mesh
  - {{ $release.Namespace }}/{{ $service.name }}-egress
  tcp:
  - match:
    - gateways:
      - mesh
      destinationSubnets:
      - {{ $service.ip }}/32
      port: {{ $service.port }}
    route:
    - destination:
        host: {{ default "istio-egressgateway" $service.gateway.name  }}.istio-system.svc.cluster.local
        subset: {{ $service.name }}-egress
        port:
          number: {{ $service.port }}
  - match:
    - gateways:
      - {{ $release.Namespace }}/{{ $service.name }}-egress
      port: {{ $service.port }}
    route:
    - destination:
        host: {{ $service.host }}
        port:
          number: {{ $service.port }}
      weight: 100
      {{- end }}
    {{- end }}
  {{- end }}
  # Ingress Rules
  {{- if $values.trafficManagement.ingress }}
    {{- range $service := $values.trafficManagement.ingress }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $service.name }}-ingress
  namespace: {{ $release.Namespace }}
  labels:
{{ include "chart.labels" $scope | indent 4 }}
spec:
  hosts:
  - {{ $service.host.origin | quote }}
  gateways:
  - istio-system/{{ $service.gateway }}
  http:
      {{- range $path := $service.paths }}
  - match:
    - uri:
{{ toYaml $path.sourcePath | indent 8 }}
    rewrite:
      uri: {{ $path.targetPath }}
    route:
    - destination:
        port:
          number: {{ $service.port }}
        host: {{ $service.host.target }}
        {{- if $service.cors }}
          {{- if $service.cors.enabled }}
    corsPolicy:
      allowOrigin: 
{{ toYaml $service.cors.origins | indent 6 }}
      allowMethods:
      - GET
      - POST
      - PUT
      - DELETE
      - HEAD
      - OPTIONS
      - PATCH
      allowHeaders:
      - Content-Type
      - Authorization
      - access
      - User-agent
      - X-API-KEY
      allowCredentials: true
          {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
  # Extra
  {{- if $values.trafficManagement.extraVirtualServices }}
    {{- range $service := $values.trafficManagement.extraVirtualServices }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $service.name }}
  namespace: {{ $release.Namespace }}
  labels:
{{ include "chart.labels" $scope | indent 4 }}
spec:
{{ toYaml $service.spec | indent 2 }}
    {{- end }}
  {{- end }}
{{- end }}
